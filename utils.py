import fitz  # PyMuPDF
import io
import os
from datetime import datetime
from openai import OpenAI
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import mm
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from reportlab.lib.colors import HexColor
from dotenv import load_dotenv

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

def extraer_texto_de_pdf(file) -> str:
    texto_completo = ""
    with fitz.open(stream=file.file.read(), filetype="pdf") as doc:
        for pagina in doc:
            texto_completo += pagina.get_text()
    return texto_completo

def analizar_con_openai(texto: str) -> str:
    max_chars = 12000
    partes = [texto[i:i + max_chars] for i in range(0, len(texto), max_chars)]

    CRAFT_PROMPT = """
C ‚Äì Contexto
Est√°s trabajando con una colecci√≥n de documentos legales, t√©cnicos y administrativos denominados pliegos de licitaci√≥n, los cuales incluyen m√∫ltiples anexos que var√≠an en contenido y extensi√≥n. Cada pliego contiene informaci√≥n cr√≠tica para la formulaci√≥n de propuestas por parte de empresas u organizaciones interesadas en contratar con el Estado o entidades privadas. Estos documentos est√°n redactados en un lenguaje jur√≠dico-administrativo, y su an√°lisis requiere un conocimiento detallado de normativas, leyes aplicables, criterios t√©cnicos y est√°ndares de redacci√≥n de informes gerenciales.

R ‚Äì Rol
Asumes el rol de un consultor jur√≠dico-administrativo y analista de licitaciones con m√°s de 20 a√±os de experiencia, especializado en la interpretaci√≥n, evaluaci√≥n y resumen estructurado de pliegos de licitaci√≥n complejos. Eres un profesional con conocimientos avanzados en derecho administrativo, contrataci√≥n p√∫blica, redacci√≥n t√©cnica y an√°lisis documental. Tu labor es generar informes estandarizados, precisos y verificables que resuman fielmente el contenido completo de los pliegos, sin omitir absolutamente ning√∫n dato relevante y citando con exactitud la fuente original de cada informaci√≥n (anexo, n√∫mero de p√°gina y secci√≥n del pliego).

A ‚Äì Acci√≥n
Realiza los siguientes pasos con absoluta rigurosidad:

Lee y analiza detalladamente cada uno de los documentos y anexos que conforman el pliego de licitaci√≥n.

Extrae toda la informaci√≥n relevante del contenido, sin omitir ni agregar absolutamente nada que no est√© expl√≠citamente mencionado en los documentos.

Organiza la informaci√≥n en un informe estandarizado, siguiendo la estructura definida (ver secci√≥n ‚ÄúFormato‚Äù).

Para cada dato extra√≠do, incluye de forma obligatoria:

El nombre o n√∫mero del anexo o documento fuente.

El n√∫mero de p√°gina exacta donde se encuentra la informaci√≥n.

La secci√≥n o t√≠tulo bajo el cual aparece, si est√° disponible.

Utiliza un lenguaje t√©cnico, profesional, claro y preciso, adecuado para informes gerenciales.

No interpretes, supongas ni generes contenido especulativo. Si algo no est√° presente o es ambiguo, se√±ala ‚ÄúInformaci√≥n no especificada en el pliego‚Äù y deja constancia del anexo revisado.

Asegura la consistencia estructural del informe para que todos los informes generados sigan el mismo orden y estilo, facilitando la comparaci√≥n y archivo de m√∫ltiples licitaciones.

Se√±ala si alg√∫n documento o anexo est√° incompleto, ilegible o no corresponde con el √≠ndice del pliego.

En caso de que haya incongruencias entre documentos, notif√≠calas en una secci√≥n final de ‚ÄúObservaciones‚Äù.

F ‚Äì Formato
El informe final debe seguir exactamente esta estructura, en este orden:

üìò Informe Estandarizado de Pliego de Licitaci√≥n

Datos Generales del Pliego
- Nombre de la licitaci√≥n
- N√∫mero de proceso
- Entidad convocante
- Objeto de la contrataci√≥n
- Fecha de publicaci√≥n
- Presupuesto referencial
- Plazo de ejecuci√≥n

Requisitos Legales y Administrativos
- Documentaci√≥n requerida
- Condiciones de admisibilidad
- Requisitos del oferente
- Garant√≠as exigidas

Condiciones T√©cnicas del Servicio o Producto
- Especificaciones t√©cnicas
- Alcance del servicio
- Lugar y modo de ejecuci√≥n
- Cronograma de actividades

Criterios de Evaluaci√≥n
- M√©todos y ponderaciones
- Factores de puntuaci√≥n
- Criterios de desempate

Condiciones Contractuales
- Modelo de contrato
- Penalidades
- Condiciones de pago
- Cl√°usulas especiales

Consultas, Aclaraciones y Modificaciones
- Preguntas frecuentes respondidas
- Aclaraciones emitidas por la entidad
- Cambios en las bases

An√°lisis por Anexo
Anexo 1: [Nombre] ‚Äî Resumen de contenido y p√°gina(s) citadas  
Anexo 2: [Nombre] ‚Äî Resumen de contenido y p√°gina(s) citadas  
(‚Ä¶continuar con todos los anexos incluidos‚Ä¶)

Observaciones Generales
- Incongruencias detectadas
- Documentos faltantes o ilegibles
- Advertencias relevantes

Anexos del Informe
- Tabla de referencias: documento, p√°gina y contenido citado
- Glosario (si es necesario)

T ‚Äì P√∫blico objetivo
Este informe est√° dirigido a equipos legales, t√©cnicos y directivos de una empresa que analiza procesos de licitaci√≥n p√∫blica o privada. Los destinatarios son profesionales con experiencia media a avanzada en contrataci√≥n, pero necesitan un resumen ejecutivo y preciso que les ahorre tiempo y les permita tomar decisiones r√°pidas. El contenido debe estar en espa√±ol t√©cnico-jur√≠dico, con redacci√≥n profesional, clara y sin ambig√ºedades.
"""

    res√∫menes = []
    for i, parte in enumerate(partes, 1):
        prompt = (
            f"{CRAFT_PROMPT}\n\n"
            f"üìÑ A continuaci√≥n se presenta la parte {i} de {len(partes)} del pliego. "
            f"Realiza el an√°lisis correspondiente de esta secci√≥n seg√∫n el marco anterior:\n\n"
            f"{parte}"
        )
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Act√∫a como consultor experto en licitaciones y an√°lisis jur√≠dico-administrativo."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.3,
        )
        resumen_parcial = response.choices[0].message.content.strip()
        res√∫menes.append(resumen_parcial)

    return "\n\n".join(res√∫menes)

def responder_chat_openai(mensaje: str, contexto: str = "", usuario: str = "Usuario") -> str:
    descripcion_interfaz = f"""
Sos el asistente inteligente de la plataforma web "Suizo Argentina - Licitaciones IA". Esta plataforma permite:

- Cargar y analizar m√∫ltiples archivos PDF que conforman un pliego.
- Obtener un resumen profesional con estructura estandarizada.
- Consultar un historial de an√°lisis realizados por cada usuario.
- Descargar informes en PDF con dise√±o institucional.
- Crear tickets de soporte.
- Administrar usuarios (solo rol admin).
- Usar este chat para responder consultas sobre pliegos o la interfaz.

Tu funci√≥n principal es asistir al usuario en el entendimiento y lectura de los pliegos analizados. Tambi√©n brind√°s soporte sobre el uso general de la plataforma.

El usuario actual es: {usuario}
"""

    if not contexto:
        contexto = "(No hay historial disponible actualmente.)"

    prompt = f"""
{descripcion_interfaz}

üìÇ Historial de an√°lisis previos:
{contexto}

üß† Pregunta del usuario:
{mensaje}

üìå Respond√© de manera natural, directa y profesional. No repitas lo que hace la plataforma. Respond√© exactamente lo que se te pregunta.
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Actu√°s como un asistente experto en an√°lisis de pliegos de licitaci√≥n y soporte de plataformas digitales."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=1200
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è Error al generar respuesta: {e}"

def generar_pdf_con_plantilla(resumen: str, nombre_archivo: str):
    output_dir = os.path.join("generated_pdfs")
    os.makedirs(output_dir, exist_ok=True)
    output_path = os.path.join(output_dir, nombre_archivo)

    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)

    plantilla_path = os.path.join("static", "fondo-pdf.png")
    if os.path.exists(plantilla_path):
        plantilla = ImageReader(plantilla_path)
        c.drawImage(plantilla, 0, 0, width=A4[0], height=A4[1])

    azul = HexColor("#044369")
    c.setFillColor(azul)
    c.setFont("Helvetica-Bold", 16)
    c.drawCentredString(A4[0] / 2, A4[1] - 30 * mm, "Resumen Anal√≠tico de Licitaci√≥n")
    c.setFont("Helvetica", 10)
    c.drawCentredString(A4[0] / 2, A4[1] - 36 * mm, "Inteligencia Comercial")
    c.setFillColor("black")
    c.setFont("Helvetica", 10)
    fecha_actual = datetime.now().strftime("%d/%m/%Y %H:%M")
    c.drawCentredString(A4[0] / 2, A4[1] - 42 * mm, f"{fecha_actual}")
    resumen = resumen.replace("**", "")
    c.setFont("Helvetica", 11)
    margen_izquierdo = 20 * mm
    margen_superior = A4[1] - 54 * mm
    ancho_texto = 170 * mm
    alto_linea = 14
    y = margen_superior

    for parrafo in resumen.split("\n"):
        if not parrafo.strip():
            y -= alto_linea
            continue
        if (
            parrafo.strip().endswith(":")
            or parrafo.strip().startswith("üìò")
            or parrafo.strip().istitle()
        ):
            c.setFont("Helvetica-Bold", 12)
            c.setFillColor(azul)
        else:
            c.setFont("Helvetica", 11)
            c.setFillColor("black")
        for linea in dividir_texto(parrafo.strip(), c, ancho_texto):
            if y <= 20 * mm:
                c.showPage()
                if os.path.exists(plantilla_path):
                    c.drawImage(plantilla, 0, 0, width=A4[0], height=A4[1])
                c.setFont("Helvetica", 11)
                c.setFillColor("black")
                y = margen_superior
            c.drawString(margen_izquierdo, y, linea)
            y -= alto_linea
        y -= 6

    c.save()
    with open(output_path, "wb") as f:
        f.write(buffer.getvalue())

    return output_path

def dividir_texto(texto, canvas_obj, max_width):
    palabras = texto.split(" ")
    lineas = []
    linea_actual = ""

    for palabra in palabras:
        test_line = linea_actual + " " + palabra if linea_actual else palabra
        if canvas_obj.stringWidth(test_line, canvas_obj._fontname, canvas_obj._fontsize) <= max_width:
            linea_actual = test_line
        else:
            lineas.append(linea_actual)
            linea_actual = palabra

    if linea_actual:
        lineas.append(linea_actual)

    return lineas
